version: v2beta1
name: vote-devspace
vars:
  DEVSPACE_ENV_FILE: .env_devspace
pipelines:
  dev:
    run: |-
      if [ ! -e .devspace/status/dev ] || [ $(get_flag "force-deploy") == "true" ] # Check if Dev container already exist
      then
        mkdir -p .devspace/status && touch .devspace/status/dev # Create dev file flag
        devspace create
        run_dependencies --all       # Deploy any projects this project needs(see "dependencies")
        create_deployments --all     # Deploy Helm charts and manifests specfied as "deployments"
        start_dev ${APP}             # Start dev mode "app" (see "dev" section)
      else
        devspace create
        start_dev ${APP}             # Start dev mode "app" (see "dev" section)
      fi
  deploy:
    run: |-
      devspace create
      run_dependencies --all         # 1. Deploy any projects this project needs (see "dependencies")
      build_images --all             # 2. Build, tag (git commit hash) and push all images (see "images")
      create_deployments --all       # 3. Deploy Helm charts and manifests specfied as "deployments"
  purge:
    run: |-
      rm -f .devspace/status/dev     # Remove dev file flag
      stop_dev --all
      purge_deployments --all
      run_dependencies --all --pipeline purge
  wireshark:
    flags:
    - name: output
      short: o
      type: string
      default: 'false'
    run: |-
      OUTPUT=$(get_flag "output")
      POD=$(select_pod --label-selector "app.kubernetes.io/component=${APP}")
      kubectl config view --minify --raw > /tmp/kubeconfig-sniff
      if [ $OUTPUT == "false" ]
      then
       KUBECONFIG=/tmp/kubeconfig-sniff kubectl sniff $POD -f "port ${PORT}" -n ${DEVSPACE_NAMESPACE}
      elif [ $OUTPUT == "tshark" ]
      then
       KUBECONFIG=/tmp/kubeconfig-sniff kubectl sniff $POD -f "port ${PORT}" -n ${DEVSPACE_NAMESPACE} -o - | tshark -r -
      else
       KUBECONFIG=/tmp/kubeconfig-sniff kubectl sniff $POD -f "port ${PORT}" -n ${DEVSPACE_NAMESPACE} -o ${OUTPUT}
      fi
images:
  vote:
    image: ${IMAGE}
    tags:
    - $(echo dev-$USER-$(shuf -er -n4  {A..Z} {a..z} {0..9} | paste -sd ""))
    buildArgs:
      MVN_SRV: ${MVN_SRV}
      MVN_USER: ${MVN_USER}
      MVN_PASS: ${MVN_PASS}
    kaniko: {}
deployments:
  vote:
    updateImageTags: true
    helm:
      chart:
        name: component-chart
        repo: https://charts.devspace.sh
      values:
        containers:
        - image: ${IMAGE}
          env:
          - name: MVN_SRV
            value: ${MVN_SRV}
          - name: MVN_USER
            value: ${MVN_USER}
          - name: MVN_PASS
            value: ${MVN_PASS}
        service:
          ports:
          - port: ${PORT}
        pullSecrets:
        - docker-hub-secret
dev:
  vote:
    labelSelector:
      app.kubernetes.io/component: ${APP}
    devImage: hossko/python:3.10-alpine
    command:
    - python
    - main.py
    sync:
    - path: ./
      startContainer: true
      waitInitialSync: true
      onUpload:
        restartContainer: true
        exec:
        - command: ./devspace_start.sh
          once: true
        # - command: |-
        #     devspace run k6
        #   onChange: ["./main.py"]  
      excludePaths:
      - output
      - .vscode
      - node_modules
      - .gitignore
      - target
      - package-lock.json
      - yarn.lock
      - .git
    terminal:
      enabled: true
      disableScreen: true
    ssh:
      enabled: true
    proxyCommands:
    - command: devspace
    - command: kubectl
    - command: helm
    - command: git
    ports:
    - port: ${LOCAL_PORT}:${PORT}
    open:
    - url: http://localhost:${LOCAL_PORT}
    env:
    - name: LOCAL_PORT
      value: ${LOCAL_PORT}
commands:
  wireshark: devspace run-pipeline wireshark $@
  k6: 'kubectl delete pod k6 || cat .k6/script.js | kubectl run --rm -i --stdin --restart=Never
    k6 --image=grafana/k6 -- run --out influxdb=http://influxdb.observability:8086
    - > .k6/results.txt        '
