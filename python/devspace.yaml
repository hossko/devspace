version: v2beta1
name: app-devspace

vars:
  DEVSPACE_ENV_FILE: ".env_devspace"

# This is a list of `pipelines` that DevSpace can execute (you can define your own)
pipelines:
  dev:
    run: |-
      if [ ! -e .devspace/status/dev ] || [ $(get_flag "force-deploy") == "true" ] # Check if Dev container already exist
      then
        mkdir -p .devspace/status && touch .devspace/status/dev # Create dev file flag
        devspace create
        run_dependencies --all       # Deploy any projects this project needs(see "dependencies")
        create_deployments --all     # Deploy Helm charts and manifests specfied as "deployments"
        start_dev ${APP}             # Start dev mode "app" (see "dev" section)
      else
        devspace create
        start_dev ${APP}             # Start dev mode "app" (see "dev" section)
      fi
  deploy:
    run: |-
      devspace create
      run_dependencies --all         # 1. Deploy any projects this project needs (see "dependencies")
      build_images --all             # 2. Build, tag (git commit hash) and push all images (see "images")
      create_deployments --all       # 3. Deploy Helm charts and manifests specfied as "deployments"
  purge:
    run: |-
      rm -f .devspace/status/dev     # Remove dev file flag
      stop_dev --all
      purge_deployments --all
      run_dependencies --all --pipeline purge  
  wireshark:
    flags:
    - name: output
      short: o
      type: string
      default: 'false'
    run: |-
       OUTPUT=$(get_flag "output")
       POD=$(select_pod --label-selector "app.kubernetes.io/component=${APP}")
       kubectl config view --minify --raw > /tmp/kubeconfig-sniff
       if [ $OUTPUT == "false" ]
       then
        KUBECONFIG=/tmp/kubeconfig-sniff kubectl sniff $POD -f "port ${PORT}"
       elif [ $OUTPUT == "tshark" ]
       then
        KUBECONFIG=/tmp/kubeconfig-sniff kubectl sniff $POD -f "port ${PORT}" -o - | tshark -r -
       else
        KUBECONFIG=/tmp/kubeconfig-sniff kubectl sniff $POD -f "port ${PORT}" -o ${OUTPUT}
       fi 
# This is a list of `images` that DevSpace can build for this project
# We recommend to skip image building during development (devspace dev) as much as possible
images:
  app:
    image: ${IMAGE}
    tags: 
      - $(echo dev-$USER-$(shuf -er -n4  {A..Z} {a..z} {0..9} | paste -sd ""))
    buildArgs:
      MVN_SRV: ${MVN_SRV}
      MVN_USER: ${MVN_USER}
      MVN_PASS: ${MVN_PASS}  
    kaniko:
      pullSecret: docker-hub-secret

# This is a list of `deployments` that DevSpace can create for this project
deployments:
  app:
    updateImageTags: true
    # This deployment uses `helm` but you can also define `kubectl` deployments or kustomizations
    helm:
      # We are deploying this project with the Helm chart you provided
      chart:
        name: component-chart
        repo: https://charts.devspace.sh
      # Under `values` we can define the values for this Helm chart used during `helm install/upgrade`
      # You may also use `valuesFiles` to load values from files, e.g. valuesFiles: ["values.yaml"]
      values:
        containers:
          - image: ${IMAGE}
            env:
            - name: MVN_SRV
              value: ${MVN_SRV}
            - name: MVN_USER
              value: ${MVN_USER}
            - name: MVN_PASS
              value: ${MVN_PASS}            
        service:
          ports:
            - port: ${PORT}
        pullSecrets:
          - docker-hub-secret    
        ingress:
          ingressClassName: nginx
          annotations:
            cert-manager.io/cluster-issuer: "letsencrypt-staging"
            nginx.ingress.kubernetes.io/rewrite-target: /
            nginx.ingress.kubernetes.io/ssl-redirect: "false"
          rules:
          - host: ${FQDN}
            path: ${ROUTE}
            pathType: Prefix
            serviceName: ${APP}
            servicePort: ${PORT}
          tls: ${FQDN} 

# This is a list of `dev` containers that are based on the containers created by your deployments
dev:
  app:
    # Search for the container that runs have this label
    labelSelector:
      app.kubernetes.io/component: ${APP}
    # Replace the container image with this dev-optimized image (allows to skip image building during development)
    devImage: hossko/python:3.10-alpine
    command: ["python","main.py"]
    # Sync files between the local filesystem and the development container
    sync:
      - path: ./
        startContainer: true
        waitInitialSync: true
        onUpload:
          restartContainer: true 
          exec:
          - command: "./devspace_start.sh"
            once: true
        excludePaths:
           - "output"
           - ".vscode"
           - "node_modules"
           - ".gitignore"
           - "target"
           - "package-lock.json"
           - "yarn.lock"
           - ".git"         
    # Open a terminal and use the following command to start it
    terminal:
      enabled: true
      disableScreen: true 
    # Inject a lightweight SSH server into the container (so your IDE can connect to the remote dev env)
    ssh:
      enabled: true
    # Make the following commands from my local machine available inside the dev container
    proxyCommands:
      - command: devspace
      - command: kubectl
      - command: helm
      - command: git
    # Forward the following ports to be able access your application via localhost
    ports:
      - port: ${LOCAL_PORT}:${PORT}
    # Open the following URLs once they return an HTTP status code other than 502 or 503
    open:
      - url: http://localhost:${LOCAL_PORT}
    env:
      - name: LOCAL_PORT
        value: ${LOCAL_PORT}

commands:
  wireshark: |-
      devspace run-pipeline wireshark $@
  k6: |-
      cat .k6/script.js | kubectl run --rm -i --stdin --restart=Never k6 --image=grafana/k6 -- run - > .k6/results.txt        